#!/bin/bash

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

APP_NAME="_APP_NAME_"
APP_USER="_APP_USER_"
APP_GROUP="_APP_GROUP_"
TEMPLATE="/usr/share/${APP_NAME}-mysql/templates/database.template"
OUTPUT="/etc/${APP_NAME}/conf.d/database"

# source debconf library
. /usr/share/debconf/confmodule

mysql_execute() {
  local defaults_file="$1"
  local command="$2"

  mysql --defaults-file="$defaults_file" -e "$command"
}

join() { 
  local IFS="$1"; shift; echo "$*";
}

generate_database_template() {
  local tmpfile=$(mktemp)
  cp "${TEMPLATE}" "${tmpfile}"
  sed -i "s|_DBC_DBTYPE_|mysql|g" ${tmpfile}
  sed -i "s|_DBC_DBUSER_|${dbc_username}|g" ${tmpfile}
  sed -i "s|_DBC_DBPASS_|${dbc_password}|g" ${tmpfile}
  sed -i "s|_DBC_DBSERVER_|${dbc_host}|g" ${tmpfile}
  sed -i "s|_DBC_DBPORT_|${dbc_port}|g" ${tmpfile}
  sed -i "s|_DBC_DBNAME_|${dbc_name}|g" ${tmpfile}

  if [ "$dbc_ssl" = "true" ] ; then
    local query=()
    if [ ! -z "$dbc_ssl_ca" ]; then
      local dst_ca_cert="/etc/${APP_NAME}/mysql/ca-cert.pem"
      cp -f "$dbc_ssl_ca" "$dst_ca_cert" || true
      query+=("sslca=${dst_ca_cert}")
    fi
    if [ ! -z "$dbc_ssl_cert" ]; then
      local dst_ssl_cert="/etc/${APP_NAME}/mysql/client-cert.pem"
      cp -f "$dbc_ssl_cert" "$dst_ssl_cert" || true
      query+=("sslcert=${dst_ssl_cert}")
    fi
    if [ ! -z "$dbc_ssl_key" ]; then
      local dst_ssl_key="/etc/${APP_NAME}/mysql/client-key.pem"
      ( cp -f "$dbc_ssl_key" "$dst_ssl_key" && chmod 0600 "$dst_ssl_key" ) || true
      query+=("sslkey=${dst_ssl_key}")
    fi
    chown ${APP_USER}.${APP_GROUP} /etc/${APP_NAME}/mysql/*.pem || true

    query=$(join \& "${query[@]}")
    query="?${query}"
    # safe query
    query=$(printf '%s\n' "$query" | sed 's/[[|\.*^$/&]/\\&/g')
  else
    local query=""
  fi
  sed -i "s|_DBC_QUERY_|${query}|g" ${tmpfile}

  echo "Generating ${OUTPUT}..."
  mv "${tmpfile}" "${OUTPUT}"
}

case "$1" in

  configure)

    db_get ${APP_NAME}/mysql/autoinstall
    autoinstall="$RET"

    if [ "$autoinstall" = "skip" ]; then
      exit 0
    else
      db_get ${APP_NAME}/mysql/db_host
      dbc_host="$RET"
      db_get ${APP_NAME}/mysql/db_port
      dbc_port="$RET"
      db_get ${APP_NAME}/mysql/db_username
      dbc_username="$RET"
      db_get ${APP_NAME}/mysql/db_password
      dbc_password="$RET"
      db_get ${APP_NAME}/mysql/db_name
      dbc_name="$RET"
      db_get ${APP_NAME}/mysql/db_source_host
      dbc_source_host="$RET"

      # SSL settings
      db_get ${APP_NAME}/mysql/ssl
      dbc_ssl="$RET"
      db_get ${APP_NAME}/mysql/ssl_ca
      dbc_ssl_ca="$RET"
      db_get ${APP_NAME}/mysql/ssl_cert
      dbc_ssl_cert="$RET"
      db_get ${APP_NAME}/mysql/ssl_key
      dbc_ssl_key="$RET"

      # Create the user and database if needed
      if [ "$autoinstall" = "create a new database" ]; then
	db_get ${APP_NAME}/mysql/admin_username
	dbc_admin_username="$RET"
	db_get ${APP_NAME}/mysql/admin_password
	dbc_admin_password="$RET"

	tmpfile=$(mktemp)
	cat > $tmpfile <<CONFIG
[client]
password="${dbc_admin_password}"
user="${dbc_admin_username}"
host="${dbc_host}"
port="${dbc_port}"
CONFIG
	if [ "$dbc_ssl" = "true" ]; then
	  cat >> $tmpfile <<CONFIG
ssl-ca="${dbc_ssl_ca}"
ssl-cert="${dbc_ssl_cert}"
ssl-key="${dbc_ssl_key}"
CONFIG
	fi

	db_get ${APP_NAME}/mysql/retry || true
	retry_ignore_abort="$RET"

	if [ "$retry_ignore_abort" = "ignore" ]; then set +e; fi
	mysql_execute "$tmpfile" "GRANT USAGE ON *.* TO '${dbc_username}'@'${dbc_source_host}' IDENTIFIED BY '${dbc_password}';"
	mysql_execute "$tmpfile" "CREATE DATABASE IF NOT EXISTS \`${dbc_name}\` CHARACTER SET utf8;"
	mysql_execute "$tmpfile" "GRANT ALL PRIVILEGES ON \`${dbc_name}\`.* TO '${dbc_username}'@'${dbc_source_host}'; FLUSH PRIVILEGES;";
	if [ "$retry_ignore_abort" = "ignore" ]; then set -e; fi

	rm -f "$tmpfile"
      fi

      generate_database_template
    fi
  ;;

  abort-upgrade|abort-remove|abort-deconfigure)
    exit 0
  ;;

  *)
    echo "postinst called with unknown argument \`$1'" >&2
    exit 1
  ;;
esac

